/*  Tolua binding for SFML Audio  */

$#include <SFML/Audio.hpp>

namespace sf
{
	// Listener
	class Listener
	{
		static void SetGlobalVolume(float volume);
		static float GetGlobalVolume();
		static void SetPosition(float x, float y, float z);
		static void SetPosition(const sf::Vector3f &pos);
		static sf::Vector3f GetPosition();
		static void SetDirection(const sf::Vector3f &dir);
		static void SetDirection(float x, float y, float z);
		static sf::Vector3f GetDirection();
	};
	
	// Sound source status
	namespace SoundSource
	{
		enum Status
		{
			Stopped,
			Paused,
			Playing
		};
	};
	
	// SoundSource
	class SoundSource
	{
		void SetPitch(float pitch);
		void SetVolume(float volume);
		void SetPosition(float x, float y, float z);
		void SetPosition(const sf::Vector3f &pos);
		void SetRelativeToListener(bool relative);
		void SetMinDistance(float distance);
		void SetAttenuation(float attenuation);
		float GetPitch() const;
		float GetVolume() const;
		sf::Vector3f GetPosition() const;
		bool IsRelativeToListener() const;
		float GetMinDistance() const;
		float GetAttenuation() const;
	};
	
	// SoundStream
	class SoundStream : public SoundSource
	{
		void Play();
		void Pause();
		void Stop();
		unsigned int GetChannelsCount() const;
		unsigned int GetSampleRate() const;
		unsigned int GetStatus() const;
		void SetPlayingOffset(unsigned int timeoffset);
		unsigned int GetPlayingOffset() const;
		void SetLoop(bool loop);
		bool GetLoop() const;
	};
	
	
	// Music
	// Note: Fix GetStatus for enum
	class Music : public sf::SoundStream
	{
		Music();
		~Music();
		
		bool OpenFromFile(const std::string &filename);
		unsigned int GetDuration() const;
	};
	
	// SoundBuffer
	class SoundBuffer
	{
		SoundBuffer();
		SoundBuffer(const sf::SoundBuffer &copy);
		~SoundBuffer();
		
		bool LoadFromFile(const std::string &filename);
		bool SaveToFile(const std::string &filename) const;
		unsigned int GetSamplesCount() const;
		unsigned int GetSampleRate() const;
		unsigned int GetChannelsCount() const;
		unsigned int GetDuration() const;
	};
	
	// Sound
	class Sound : public sf::SoundSource
	{
		Sound();
		Sound(const sf::SoundBuffer &buf, bool loop=false, float pitch=1.0f, float volume=100.0f, const sf::Vector3f &pos=sf::Vector3f(0,0,0));
		Sound(const sf::Sound &copy);
		~Sound();
	};
	
	// SoundRecorder
	class SoundRecorder
	{
		void Start(unsigned int samplerate=44100);
		void Stop();
		unsigned int GetSampleRate() const;
		static bool IsAvailable();
	};
	
	// SoundBufferRecorder
	class SoundBufferRecorder : public sf::SoundRecorder
	{
		SoundBufferRecorder();
		~SoundBufferRecorder();
		
		const sf::SoundBuffer &GetBuffer() const;
	};
	
};