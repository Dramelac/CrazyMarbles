$#include "../2disometric.h"

class IsometricMapSprite
{
    public:
    IsometricMapSprite();
    IsometricMapSprite(const sf::Image &image, const sf::Vector2f &position=sf::Vector2f(0,0),
        const sf::Vector2f &scale=sf::Vector2f(1,1), float rotation=0.f, const sf::Color &color=sf::Color(255,255,255,255));
    ~IsometricMapSprite();

    void SetWorldPosition(float x, float y);
    void SetWorldPosition(const sf::Vector2f &position);
    sf::Vector2f GetWorldPosition() const;

    void SetWorldZ(float z);
    float GetWorldZ();
	
	void setUseLighting(bool use);
    bool getUseLighting();
	
	void SetPosition(float x, float y);
		void SetPosition(const sf::Vector2f &position);
		void SetX(float x);
		void SetY(float y);
		void SetScale(float sx, float sy);
		void SetScale(const sf::Vector2f &scale);
		void SetScaleX(float s);
		void SetScaleY(float s);
		void SetOrigin(float x, float y);
		void SetOrigin(const sf::Vector2f &origin);
		void SetRotation(float angle);
		void SetColor(const sf::Color &color);
		void SetBlendMode(sf::Blend::Mode mode);
		const sf::Vector2f& GetPosition() const;
		const sf::Vector2f& GetScale() const;
		const sf::Vector2f& GetOrigin() const;
		float GetRotation() const;
		const sf::Color &GetColor() const;
		int GetBlendMode() const;
		void Move(float ox, float oy);
		void Move(const sf::Vector2f &o);
		void Scale(float sx, float sy);
		void Scale(const sf::Vector2f &s);
		void Rotate(float angle);
		sf::Vector2f TransformToLocal(const sf::Vector2f &point) const;
		sf::Vector2f TransformToGlobal(const sf::Vector2f &point) const;
		
	void SetImage(const sf::Image &img, bool adjust=false);
		void SetSubRect(const sf::IntRect &rect);
		void Resize(float w, float h);
		void FlipX(bool flipped);
		void FlipY(bool flipped);
		const sf::Image * GetImage() const;
		const sf::IntRect &GetSubRect() const;
		sf::Vector2f GetSize() const;
		sf::Color GetPixel(unsigned int x, unsigned int y);
};


struct DynamicLight
{
    DynamicLight() ;
    ~DynamicLight();

    void setColor(float r, float g, float b);
    void setRadius(float rad);
    void setPosition(float x, float y);
    sf::Vector2f m_position;
    sf::Vector3f m_color;
    float m_radius;
};

class LightMap
{
    public:
    LightMap(int w, int h, int nodesize);
    ~LightMap();

    void resize(int w, int h);
    void clearStatic();
    void clearDynamic();
    void updateRegion(int sx, int sy, int num_nodes, int num_rows);
    DynamicLight *requestLight();
    void releaseLight(DynamicLight *light);
    sf::Color getLightValue(int x, int y);
    void setAmbient(float r, float g, float b);
	
	void debugPrintLights();

    void addStaticLightCell(int x, int y, float r, float g, float b);
    void addStaticLightRadius(float x, float y, float r, float g, float b, float radius);
};

class IsometricMap
{
    public:
    IsometricMap(int w, int h, int nodesize);
    ~IsometricMap();
	sf::Vector2f projectMouseCoords(int mx, int my, sf::RenderWindow *win);

    void resize(int w, int h);
    void clear();

    void insertSprite(IsometricMapSprite *s);
    void removeSprite(IsometricMapSprite *s);
    void draw(sf::RenderWindow *win);

    void addLeftWall(int x, int y, std::string &name); // Set a left wall piece
    void addRightWall(int x, int y, std::string &name);
    void addFloor(int x, int y, std::string &name);
    void addRoof(int x, int y, std::string &name, float height);
	
	LightMap *getLightMap();
	
	void setCenter(float x, float y);

};